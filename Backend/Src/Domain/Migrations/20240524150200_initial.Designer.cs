// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240524150200_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostOneHour")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CostOneHour = 1500m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3006),
                            Description = "Мини-погрузчик представляет собой компактное и удобное специализированное строительное оборудование, которое используется для погрузки, разгрузки и перемещения различных грузов на строительных площадках, складах и прочих объектах. Эти машины отличаются маневренностью, удобством управления и возможностью работать в условиях ограниченного пространства.",
                            Name = "Мини-погрузчики",
                            PicturePath = "Files//Images//EquipmentPictures//1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CostOneHour = 3300m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3022),
                            Description = "Экскаваторы-погрузчики - это универсальные машины, которые сочетают в себе функции экскаватора и погрузчика. Они используются для выполнения различных работ на строительных площадках, дорожных работах, при уборке территории и других задачах.",
                            Name = "Экскаваторы-погрузчики",
                            PicturePath = "Files//Images//EquipmentPictures//2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CostOneHour = 3500m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3024),
                            Description = "Бульдозер - это тяжелая техника, предназначенная для перемещения грунта, выравнивания поверхности земли, разрушения сооружений и других работ на строительных площадках.",
                            Name = "Бульдозеры",
                            PicturePath = "Files//Images//EquipmentPictures//3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CostOneHour = 2000m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3026),
                            Description = "Фронтальные погрузчики – это специализированная техника, предназначенная для погрузки и перемещения грузов на строительных площадках, складах, заводах и других объектах. Они отличаются высокой маневренностью, удобством управления и большой грузоподъемностью.",
                            Name = "Фронтальные погрузчики",
                            PicturePath = "Files//Images//EquipmentPictures//4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CostOneHour = 1500m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3028),
                            Description = "Мини-экскаваторы - это компактные и удобные спецтехника, которая применяется для проведения мелких земляных работ, строительства фундаментов, канализации, прокладки трубопроводов и т.д. В Казани можно арендовать мини-экскаваторы различных марок и моделей.",
                            Name = "Мини-экскаваторы",
                            PicturePath = "Files//Images//EquipmentPictures//5.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CostOneHour = 4000m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3031),
                            Description = "Телескопические погрузчики – это многофункциональные машины, которые используются для подъема и перемещения грузов на строительных площадках, в складских помещениях и других объектах. Они обладают высокой грузоподъемностью и могут поднимать грузы на значительную высоту.",
                            Name = "Телескопические погрузчики",
                            PicturePath = "Files//Images//EquipmentPictures//6.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CostOneHour = 1500m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3033),
                            Description = "Скреперы - это специальная техника для земельных работ, которая предназначена для перемещения грунта, снега, щебня и других материалов. Они широко используются в строительстве, сельском хозяйстве и дорожном строительстве.",
                            Name = "Скреперы",
                            PicturePath = "Files//Images//EquipmentPictures//7.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CostOneHour = 2000m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3034),
                            Description = "Автогрейдеры – это специализированная строительная техника, предназначенная для выравнивания поверхности грунта на строительных объектах, дорогах, аэродромах и других объектах инфраструктуры. Они обеспечивают высокую точность и качество работы благодаря специальному оборудованию – рабочему столу с грейдерным отвалом.",
                            Name = "Автогрейдеры",
                            PicturePath = "Files//Images//EquipmentPictures//8.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CostOneHour = 3000m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3036),
                            Description = "Гусеничные тракторы - это мощные и надежные машины, которые используются для выполнения различных земельных работ, таких как строительство дорог, планировка местности, рыхление почвы и другие.",
                            Name = "Гусеничные тракторы",
                            PicturePath = "Files//Images//EquipmentPictures//9.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CostOneHour = 2500m,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 29, DateTimeKind.Utc).AddTicks(3090),
                            Description = "Колесные тракторы - это сельскохозяйственная техника, предназначенная для выполнения различных работ на поле, таких как пахота, посев, вспашка и др. Они оснащены мощным двигателем и колесным приводом, что позволяет им эффективно передвигаться по неровной местности.",
                            Name = "Колесные тракторы",
                            PicturePath = "Files//Images//EquipmentPictures//10.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Arrived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CountRentHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("boolean");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 30, DateTimeKind.Utc).AddTicks(2262),
                            Name = "В ожидание"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 30, DateTimeKind.Utc).AddTicks(2269),
                            Name = "В работе"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 30, DateTimeKind.Utc).AddTicks(2274),
                            Name = "Закончена"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 30, DateTimeKind.Utc).AddTicks(6322),
                            Name = "Guest"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 30, DateTimeKind.Utc).AddTicks(6358),
                            Name = "Operator"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 30, DateTimeKind.Utc).AddTicks(6360),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("343acdc7-f2fb-47c5-9731-5ea520108a22"),
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 31, DateTimeKind.Utc).AddTicks(4701),
                            Email = "bulat1@example.com",
                            FirstName = "Булат",
                            LastName = "Салахиев",
                            MiddleName = "Гость",
                            PasswordHash = "$2a$11$yLjJ4G/hwDSPYUD3OgbHOet2.VTeDIRTL8AwUifAHxNYBRBM5FtEW",
                            PhoneNumber = "+79177793601",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("8f8fbacd-ea00-4dd3-a2f8-3080ad8842d1"),
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 179, DateTimeKind.Utc).AddTicks(6086),
                            Email = "bulat2@example.com",
                            FirstName = "Булат",
                            LastName = "Салахиев",
                            MiddleName = "Оператор",
                            PasswordHash = "$2a$11$MxW78ZHoT5JfLtbgO0ujiuGxG87kuPVCfb9EA9uIoZcjSfOoZ7Y.i",
                            PhoneNumber = "+79177793602",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("ba73d3bb-bd2d-4e85-8e96-e1384b268878"),
                            Created = new DateTime(2024, 5, 24, 15, 2, 0, 328, DateTimeKind.Utc).AddTicks(5886),
                            Email = "bulat3@example.com",
                            FirstName = "Булат",
                            LastName = "Салахиев",
                            MiddleName = "Админ",
                            PasswordHash = "$2a$11$Mf94eyDiGFQtNv7/FDq47umDPAwBgRVXl3aSk7WyRSYxFJtAiU/N2",
                            PhoneNumber = "+79177793603",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.EquipmentEntity", "Equipment")
                        .WithMany("Orders")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OrderStatusEntity", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.EquipmentEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatusEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
